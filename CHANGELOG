0.5.0
 - Classes now are registered as PHP namespaces. 
 - Improved stability running Phalcon with PHP versions lower or equal than 5.3.3
 - Thousand of innecesary intermediate variables were removed improving stability
 - Phalcon now performs a reduced number of copy-on-write checks
 - Added class modifiers like Abstract or Final to Phalcon classes
 - Fixed memory leaks generated when throwing internal exceptions 
 - Removed deprecated experimental function and method calls

0.4.3
 - Fixed problem with partials, that removed any output previously generated
 - Added Phalcon_Session::destroy
 - Fixed memory leaks generated when throwing internal exceptions 

0.4.2
 - Added support for PostgreSQL database
 - Phalcon_View is now fully integrated with Phalcon_Cache
 - Dropped unnecessary registration of arguments for exception classes
 - Dropped unncessary zval copy-on-write checks
 - Fixed double registration of Phalcon_Config in MODULE_MINIT
 - Fixed method definition of __destruct adding ZEND_ACC_DTOR
 - Fixed bug in Phalcon_Model_Query making that the component does not apply quoting properly
 - Fixed segmentation fault in Phalcon_Loader
 - Fixed memory leaks generated when retreiving some static properties
 - Replaced PHP's str_replace for a slightly faster once
 - Improved stability working with static properties in multi-threaded web servers
 - Fixed bug in integration between Phalcon_Db and Phalcon_Logger

0.4.1
- Complex concatenations are now made without a lot of intermediate zvals improving the overall memory usage
- Improved throwing of simple exceptions with a unique string parameter
- Added Phalcon_Dispatcher::setParam to change a routing parameter
- Added Phalcon_Request::redirect to make HTTP redirections from controllers
- Phalcon_Model_* is now completely decoupled from Phalcon_Controller_Front
- Phalcon_Model_Base::_createSQLSelectMulti and Phalcon_Model_Base::_createSQLSelectOne has been joined into a single method
- Added Phalcon_Db::bindParams in order to avoid SQL injections
- Added "bind" parameter to Phalcon_Model_Base::find, Phalcon_Model_Base::findFirst, Phalcon_Model_Base::count,
Phalcon_Model_Base::sum, etc. to avoid SQL injections
- The database adapter Phalcon_Db_Adapter_Mysql was moved from mysql extension to mysqli
- Added Phalcon_Db_Result_Mysql to encapsulate the resultset functionality. Those methods were before in Phalcon_Db.
- Fixed bug rebuilding symbol table in Phalcon_View_Engine_Php::render
- Added Phalcon_View::pick to choose a view to show different than last-controller/last-action
- Now is possible to define routes with a shortened syntax in Regex
- Phalcon is now using Compare-and-Swap to reduce the number of writes to cache adapters like files or APC, also avoiding the unnecesary register of shutdown functions

0.4.0
- Fixed possible segmentation fault when releasing memory of zval strings that has constant values
- Fixed bug avoiding that auto-globals will jit-initialized inside Phalcon on some old versions of PHP
- Moved zval separation to phalcon_array_update_*
- Moved zval separation to phalcon_array_append_*
- Moved zval constructor to phalcon_array_update_*
- Implemented functions to avoid use arrays of zvals parameters for static and method calls
- Removed error reporting silence from the extension
- Removed thousands of unnecessary referencing/deferencing vars when calling functions/methods
- Moved multi-dimensional array updates to less complex functions
- Moved access to static properties to a function that controls possible invalid access to non existent properties
- Fixed memory leaks in Phalcon_Cache and Phalcon_Transaction_Manager
- Added virtual foreign keys to Phalcon_Model (ORM)
- Implemented the possibility to serialize Phalcon_Model_Resultset objects
- Implemented the possibility to access Phalcon_Model_Resultset as an array of objects
- Added Phalcon_Cache_Backend_Apc, Phalcon_Cache_Backend_Memcache, Phalcon_Cache_Frontend_None and Phalcon_Cache_Frontend_Data
- Added Phalcon_Request::hasPost and Phalcon_Request::hasQuery
- Added parameter "persistent" to Phalcon_Db allowing to create persistent connections
- Added alphanum to Phalcon_Filter to filter strings allowing filter only alpha-numeric characters
- Refactored Phalcon_Tag::select and Phalcon_Tag::selectStatic, now uses the same code in Phalcon_Tag_Select
- Added Phalcon_Tag::checkField helper to create input[type="checkbox"] tags
- Added Phalcon_View::getParams to recover extra params sent to the request
- Sometimes when Phalcon throws an internal exception or E_ERROR the memory stack is not properly cleaned
  producing an unstable state, this situation was fixed
- Phalcon_View was refactored to allow other templating engines like Mustache or Twig
- Added Phalcon_Translate for multi-lingual translation messages based on adapters
- Added calculation functions to Phalcon_Model: count, sum, average, minimum and maximum
- Dispatcher exceptions now throws a HTTP 404 Not found status
- Added Phalcon_Router_Regex to define routes based on regular expressions
- Renamed Phalcon_Request::getBestQualityCharset() to Phalcon_Request::getBestCharset()
- Added Phalcon_Request::getBestLanguage()

0.3.5
 - Most of throw exception process has been rewrriten to use less instructions
 - Super global initialization is now slightly fast
 - Fixed bug in Phalcon_Db::close
 - Added logging capabilities to Phalcon_Db
 - Added Phalcon_Model_Metadata::getIdentityField allowing to know the identity (auto_increment) field
 - Added DDL and DML methods to Phalcon_Db
 - Added Phalcon_Db_Column to describe table columns
 - Added Phalcon_Db_Index to describe table indexes
 - Added Phalcon_Db_Reference to describe table references (foreign keys)

0.3.4
 - Fixed wrong implementation in Phalcon_Tag::javascriptInclude
 - Added Phalcon_Cache_Frontend_Output
 - Renamed Phalcon_Db_Mysql to Phalcon_Db_Adapter_Mysql
 - Renamed Phalcon_Cache_Adapter_File to Phalcon_Cache_Frontend_File
 - Added Phalcon_Request::setRawHeader
 - Added Phalcon_Paginator_Adapter_Array
 - Fixed bugs in model paginator
 - Added Phalcon_Tag::hiddenField
 - Added Phalcon_Tag::fileField
 - Added Phalcon_Loader to autoload classes based on some conventions
 - Added Phalcon_Db_Profiler to profile database operations and determine posible bottlenecks
 - Added methods to query table metadata: Phalcon_Db::describeTable, Phalcon_Db::describeIndexes and Phalcon_Db::describeReferences
 - Fixed segmentation fault in Phalcon_Db::tableExists
 - Fixed memory leak in Phalcon_Paginator
 - Adding Zend Thread Safety (ZTS) support to Phalcon Memory Manager

0.3.3
 - Added Phalcon_Tag::setDefault as an alias for Phalcon_Tag::displayTo
 - Added Phalcon_View::setVar as an alias for Phalcon_View::setParamToView
 - Added ACL managment with in-memory lists
 - Fixed segfaults on methods with array optional parameters
 - Fixed segfaults on some isset
 - Added built-in model attributes validators
 - Added Phalcon_ACL to manage access lists
 - Added missing Phalcon_Tag::passwordField

0.3.2
 - Fixed separation of super globals by mistake causing segmentation faults
 - Support for compilation on Visual C++ 6.0
 - Fixed segmentation faults when required parameters are not given for most methods

0.3.1
 - Phalcon garbage collector incrementally releases memory allocated after the end of a particular execution trace reducing memory fragmentation.

0.3.0
 - Refactored many code patterns as C macros, the total base code was reduced by about 8000 lines of code less.
 - Most function calls was rewriten to avoid any string length counting by avoiding potential use of strlen. Functions and methods names have fixed string lengths improving general performance. This improvement was also implemented for static string concatenation.
 - We have implemented some kind of Register Allocation to take advantage of processor registers. However, compiler will choose best register allocations when it compiles the extension.
 - Support for PHP 5.4. A number of issues when running Phalcon under PHP 5.4 were identified and corrected.
 - In some cases memory was copied without need when updating internal arrays, them were fixed.
 - A function cache was included to avoid potential function lookups on internal HashTables. This cache stores internal pointers to functions low level code improving performance.

0.2.6
 - Fixed segfault when reading _SESSION superglobal when no session_start has been made
 - Added Phalcon_Cache with adapter File
 - Added method Phalcon_Model_Manager::getHasOneRecords
